/*
 * TicTacToe API
 *
 * The TicTacToe API is a basic suite of tools bringing TicTacToe gaming functionality to your webpages and apps. In its current version, the TicTacToe API only supports two player matchmaking scenarios - (1) where opponent for your user is assigned authomatically and (2) where your user choses a single player to challenge.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kseniia.kal@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Game : IEquatable<Game>
    { 
        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [Required]
        [DataMember(Name="gameId")]
        public int? GameId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerX
        /// </summary>
        [Required]
        [DataMember(Name="playerX")]
        public Player PlayerX { get; set; }

        /// <summary>
        /// Gets or Sets PlayerO
        /// </summary>
        [Required]
        [DataMember(Name="playerO")]
        public Player PlayerO { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NotStartedEnum for notStarted
            /// </summary>
            [EnumMember(Value = "notStarted")]
            NotStartedEnum = 0,
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 1,
            /// <summary>
            /// Enum RejectedEnum for rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            RejectedEnum = 2,
            /// <summary>
            /// Enum InProgressEnum for inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgressEnum = 3,
            /// <summary>
            /// Enum PlayerXwonEnum for playerXwon
            /// </summary>
            [EnumMember(Value = "playerXwon")]
            PlayerXwonEnum = 4,
            /// <summary>
            /// Enum PlayerOwonEnum for playerOwon
            /// </summary>
            [EnumMember(Value = "playerOwon")]
            PlayerOwonEnum = 5,
            /// <summary>
            /// Enum DrawnEnum for drawn
            /// </summary>
            [EnumMember(Value = "drawn")]
            DrawnEnum = 6        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Moves
        /// </summary>
        [DataMember(Name="moves")]
        public List<Move> Moves { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  PlayerX: ").Append(PlayerX).Append("\n");
            sb.Append("  PlayerO: ").Append(PlayerO).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Moves: ").Append(Moves).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Game)obj);
        }

        /// <summary>
        /// Returns true if Game instances are equal
        /// </summary>
        /// <param name="other">Instance of Game to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Game other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GameId == other.GameId ||
                    GameId != null &&
                    GameId.Equals(other.GameId)
                ) && 
                (
                    PlayerX == other.PlayerX ||
                    PlayerX != null &&
                    PlayerX.Equals(other.PlayerX)
                ) && 
                (
                    PlayerO == other.PlayerO ||
                    PlayerO != null &&
                    PlayerO.Equals(other.PlayerO)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Moves == other.Moves ||
                    Moves != null &&
                    Moves.SequenceEqual(other.Moves)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GameId != null)
                    hashCode = hashCode * 59 + GameId.GetHashCode();
                    if (PlayerX != null)
                    hashCode = hashCode * 59 + PlayerX.GetHashCode();
                    if (PlayerO != null)
                    hashCode = hashCode * 59 + PlayerO.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Moves != null)
                    hashCode = hashCode * 59 + Moves.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Game left, Game right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Game left, Game right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
