/*
 * TicTacToe API
 *
 * The TicTacToe API is a basic suite of tools bringing TicTacToe gaming functionality to your webpages and apps. In its current version, the TicTacToe API only supports two player matchmaking scenarios - (1) where opponent for your user is assigned authomatically and (2) where your user choses a single player to challenge.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kseniia.kal@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ResourcesGamesApiController : ControllerBase
    { 
        /// <summary>
        /// This endpoint creates a new game. It returns a location header along with a representation/object of the game just created. The response includes information about the gameId, players (playerX and playerO) and game status (notStarted by default). It is possible to request a game from a chosen player by passing an object with an identifier of this player in a request body. If such identifier is not passed, the opponent is chosen authomatically.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">game created</response>
        /// <response code="400">invalid input</response>
        [HttpPost]
        [Route("/performantIT/TicTacToeAPI_Kseniia/0.0.2/games")]
        [ValidateModelState]
        [SwaggerOperation("CreateGame")]
        [SwaggerResponse(statusCode: 201, type: typeof(Game), description: "game created")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        public virtual IActionResult CreateGame([FromBody]GameBody body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Game));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"gameId\" : 12,\n  \"playerX\" : {\n    \"availability\" : true,\n    \"playerId\" : 123,\n    \"username\" : \"player\"\n  },\n  \"moves\" : [ ],\n  \"status\" : \"notStarted\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Game>(exampleJson)
                        : default(Game);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// This endpoint creates a move in a game with the unique identifier. It requires a gameId in a path and a representation of a move that consists of coordinates (xCoordinate and yCoordinate) in the request body. Returns a representation/object of the game, where the move was created.
        /// </summary>
        /// <param name="gameId">Insert an id of a game into the endpoint path. For example, /games/12/moves</param>
        /// <param name="body"></param>
        /// <response code="201">move made successfully</response>
        /// <response code="400">invalid move</response>
        /// <response code="409">move already made</response>
        [HttpPost]
        [Route("/performantIT/TicTacToeAPI_Kseniia/0.0.2/games/{gameId}/moves")]
        [ValidateModelState]
        [SwaggerOperation("CreateMove")]
        [SwaggerResponse(statusCode: 201, type: typeof(Move), description: "move made successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid move")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "move already made")]
        public virtual IActionResult CreateMove([FromRoute][Required]GamepropertiesgameId gameId, [FromBody]MoveBody body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Move));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"byPlayer\" : \"playerX\",\n  \"xCoordinate\" : 1,\n  \"yCoordinate\" : 2\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Move>(exampleJson)
                        : default(Move);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// This endpoint retrieves information about a single game by the unique game identifier. It requires a gameId in a path and returns a single game object with full data about it - such as status and succession of moves.
        /// </summary>
        /// <param name="gameId">Insert an id of a game into the endpoint path. For example, /games/12</param>
        /// <response code="200">game found successfully</response>
        /// <response code="400">invalid id</response>
        [HttpGet]
        [Route("/performantIT/TicTacToeAPI_Kseniia/0.0.2/games/{gameId}")]
        [ValidateModelState]
        [SwaggerOperation("GetGameById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Game), description: "game found successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid id")]
        public virtual IActionResult GetGameById([FromRoute][Required]GamepropertiesgameId gameId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Game));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"gameId\" : 12,\n  \"playerX\" : {\n    \"availability\" : true,\n    \"playerId\" : 123,\n    \"username\" : \"player\"\n  },\n  \"moves\" : [ ],\n  \"status\" : \"notStarted\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Game>(exampleJson)
                        : default(Game);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
