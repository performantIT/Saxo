/*
 * TicTacToe API
 *
 * The TicTacToe API is a basic suite of tools bringing TicTacToe gaming functionality to your webpages and apps. In its current version, the TicTacToe API only supports two player matchmaking scenarios - (1) where opponent for your user is assigned authomatically and (2) where your user choses a single player to challenge.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kseniia.kal@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ResourcesPlayersApiController : ControllerBase
    { 
        /// <summary>
        /// This endpoint adds a new player to the system. It requests a username object and returns a location header along with a representation/object of the player just created - with playerId, username and availability.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">player created</response>
        /// <response code="400">invalid input</response>
        /// <response code="409">player with this username already exists</response>
        [HttpPost]
        [Route("/performantIT/TicTacToeAPI_Kseniia/0.0.2/players")]
        [ValidateModelState]
        [SwaggerOperation("AddPlayer")]
        [SwaggerResponse(statusCode: 201, type: typeof(Player), description: "player created")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "player with this username already exists")]
        public virtual IActionResult AddPlayer([FromBody]PlayerBody body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Player));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"availability\" : true,\n  \"playerId\" : 123,\n  \"username\" : \"player\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Player>(exampleJson)
                        : default(Player);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// This endpoint retrieves information about all players. It returns a collection of player objects. Each object has playerId, username and availability attributes. It is possible to query by availability to filter out players that are currently in a game or otherwise not available.
        /// </summary>
        /// <param name="availability">Pass an optional player availability parameter. For example, /players?availability&#x3D;true</param>
        /// <response code="200">player search results retrieved successfully, if applicable - matching availability criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/performantIT/TicTacToeAPI_Kseniia/0.0.2/players")]
        [ValidateModelState]
        [SwaggerOperation("FindPlayers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Player>), description: "player search results retrieved successfully, if applicable - matching availability criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "bad input parameter")]
        public virtual IActionResult FindPlayers([FromQuery]Playerpropertiesavailability availability)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Player>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"availability\" : true,\n  \"playerId\" : 123,\n  \"username\" : \"player\"\n}, {\n  \"availability\" : true,\n  \"playerId\" : 123,\n  \"username\" : \"player\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Player>>(exampleJson)
                        : default(List<Player>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
